# CMake single-platform workflow for Oscar64-based C64 project
# This workflow assumes Windows runner and local Oscar64 toolchain

name: CMake Single Platform Oscar64 Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Download Oscar64 latest release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $oscarDir = Join-Path $env:GITHUB_WORKSPACE 'oscar64_temp'
          New-Item -ItemType Directory -Force -Path $oscarDir | Out-Null
          $headers = @{ Authorization = "token $env:GH_TOKEN" }
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/drmortalwombat/oscar64/releases/latest" -Headers $headers
          $asset = $release.assets | Where-Object { $_.name -eq "oscar64.zip" }
          if (-not $asset) {
            Write-Error "No oscar64.zip asset found in latest release."
            exit 1
          }
          Write-Host "Downloading oscar64.zip..."
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "oscar64.zip"
          Write-Host "Extracting oscar64.zip..."
          Expand-Archive -Path "oscar64.zip" -DestinationPath $oscarDir
          Write-Host "Oscar64 ready."

      - name: Configure CMake
        shell: pwsh
        run: |
          $oscarDir = "$env:GITHUB_WORKSPACE/oscar64_temp"
          cmake -S . -B build -DOSCAR64_PATH="$oscarDir"

      - name: Build with CMake
        run: |
          cmake --build build --target oscar64_build
        shell: cmd

      - name: Cleanup Oscar64
        if: always()
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE/oscar64_temp"

      - name: Upload build output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            build/*.prg
            build/*.map
            build/*.lbl
            build/*.asm
      - name: List build output
        run: |
          dir build
        shell: cmd



  # Build summary job, runs after build job completes
  summary:
    needs: [build]
    runs-on: windows-latest
    if: always()
    steps:
      - name: Build summary
        shell: pwsh
        run: |
          $allSucceeded = $true
          $statuses = @()
          $statuses += "build: ${{ needs.build.result }}"
          if ($statuses -contains "build: failure" -or $statuses -contains "build: cancelled") {
            $allSucceeded = $false
          }
          if ($allSucceeded) {
            echo "# <span style='font-size:1.5em'><b>✅ <strong>ALL JOBS COMPLETED SUCCESSFULLY!</strong></b></span>" >> $env:GITHUB_STEP_SUMMARY
          } else {
            echo "# <span style='font-size:1.5em'><b>❌ <strong>ONE OR MORE JOBS FAILED OR WERE CANCELLED!</strong></b></span>" >> $env:GITHUB_STEP_SUMMARY
          }
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "#### Download the build artifact here:" >> $env:GITHUB_STEP_SUMMARY
          echo "[Artifact link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $env:GITHUB_STEP_SUMMARY
