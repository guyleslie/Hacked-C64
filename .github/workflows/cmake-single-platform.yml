
# This workflow uses the CMake Single Platform Oscar64 Build workflow to generate the build result and artifact info section at the end of the build log.
# CMake single-platform workflow for Oscar64-based C64 project
# This workflow assumes Windows runner and local Oscar64 toolchain

name: CMake Single Platform Oscar64 Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Download Oscar64 latest release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $oscarDir = Join-Path $env:GITHUB_WORKSPACE 'oscar64_temp'
          New-Item -ItemType Directory -Force -Path $oscarDir | Out-Null
          $headers = @{ Authorization = "token $env:GH_TOKEN" }
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/drmortalwombat/oscar64/releases/latest" -Headers $headers
          $asset = $release.assets | Where-Object { $_.name -eq "oscar64.zip" }
          if (-not $asset) {
            Write-Error "No oscar64.zip asset found in latest release."
            exit 1
          }
          Write-Host "Downloading oscar64.zip..."
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "oscar64.zip"
          Write-Host "Extracting oscar64.zip..."
          Expand-Archive -Path "oscar64.zip" -DestinationPath $oscarDir
          Write-Host "Oscar64 ready."

      - name: Configure CMake
        shell: pwsh
        run: |
          $oscarDir = "$env:GITHUB_WORKSPACE/oscar64_temp"
          cmake -S . -B build -DOSCAR64_PATH="$oscarDir"

      - name: Build with CMake
        run: |
          cmake --build build --target oscar64_build
        shell: cmd

      - name: Download and extract Retro Debugger
        if: success()
        shell: pwsh
        run: |
          $debuggerDir = "$env:GITHUB_WORKSPACE"
          $zipPath = Join-Path $debuggerDir 'RetroDebugger.v0.64.72-windows-x64-notsigned.zip'
          $url = 'https://github.com/slajerek/RetroDebugger/releases/download/v0.64.72/RetroDebugger.v0.64.72-windows-x64-notsigned.zip'
          Write-Host "Downloading Retro Debugger..."
          Invoke-WebRequest -Uri $url -OutFile $zipPath
          Write-Host "Extracting Retro Debugger..."
          Expand-Archive -Path $zipPath -DestinationPath $debuggerDir
          Write-Host "Retro Debugger ready."
          Remove-Item -Force $zipPath

      - name: Cleanup Oscar64
        if: always()
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:GITHUB_WORKSPACE/oscar64_temp"

      - name: Upload build output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            build/*.prg
            build/*.map
            build/*.lbl
            build/*.asm
            RetroDebugger/**
      - name: List build output
        run: |
          dir build
        shell: cmd

  # Build summary job, runs after build job completes
      - name: Build result and artifact info
        if: always()
        shell: pwsh
        run: |
          Write-Host ""
          $orange = "`e[38;5;214m"
          $green = "`e[32m"
          $red = "`e[31m"
          $reset = "`e[0m"
          if ("${{ job.status }}" -eq "success") {
            Write-Host ("${orange}=======================================================================================${reset}")
            Write-Host ("${green}BUILD SUCCESSFUL!${reset}")
            Write-Host "Latest build files:"
            Write-Host ("https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}")
            Write-Host ("${red}ARTIFACT DOWNLOAD URL IS ABOVE IN UPLOAD BUILD OUTPUT AS ARTIFACT SECTION${reset}")
            Write-Host ("Retro Debugger downloaded to RetroDebugger directory")
            Write-Host ("${orange}=======================================================================================${reset}")
          } else {
            Write-Host ("${orange}=======================================================================================${reset}")
            Write-Host ("${red}BUILD FAILED!${reset}")
            Write-Host ("${orange}=======================================================================================${reset}")
          }
